package dev.whalenet.leaf_lab

import scala.collection.mutable
import scalikejdbc.*
import java.time.OffsetDateTime

// Generic repository traits
trait Repository[T, ID] {
  def save(entity: T): T
  def findById(id: ID): Option[T]
}

// SensorResult repository
trait SensorResultRepository extends Repository[SensorResult, Int] {
  def findByPlantId(plantId: Int): List[SensorResult]
}

class DBSensorResultRepository extends SensorResultRepository {
  override def save(result: SensorResult): SensorResult = {
    if (result.id > 0) {
      throw new RuntimeException("cannot update yet")
    }
    SensorResult.create(result.plant_id, result.sensor_id, result.value)
  }
  
  override def findById(id: Int): Option[SensorResult] = {
    DB readOnly { implicit session =>
      sql"SELECT * FROM lab.plant_sensor WHERE id = $id"
        .map(SensorResult.apply)
        .single()
        .apply()
    }
  }
  
  override def findByPlantId(plantId: Int): List[SensorResult] = {
    DB readOnly { implicit session =>
      sql"SELECT * FROM lab.plant_sensor WHERE plant_id = $plantId"
        .map(SensorResult.apply)
        .list()
        .apply()
    }
  }
}

// Person repository
trait PersonRepository extends Repository[Person, Int] {
  def findByName(name: String): List[Person]
}

class DBPersonRepository extends PersonRepository {
  override def save(person: Person): Person = {
    if (person.id > 0) {
      throw new RuntimeException("cannot update yet")
    }
    Person.create(person.name)
  }
  
  override def findById(id: Int): Option[Person] = {
    DB readOnly { implicit session =>
      sql"SELECT * FROM lab.person WHERE id = $id"
        .map(Person.apply)
        .single()
        .apply()
    }
  }
  
  override def findByName(name: String): List[Person] = {
    DB readOnly { implicit session =>
      sql"SELECT * FROM lab.person WHERE name = $name"
        .map(Person.apply)
        .list()
        .apply()
    }
  }
}

// Add similar implementations for Plant and Sensor
// Plant repository example:
trait PlantRepository extends Repository[Plant, Int] {
  def findByOwner(ownerId: Int): List[Plant]
}

// Sensor repository example:
trait SensorRepository extends Repository[Sensor, Int] {
  def findByUnit(unit: String): List[Sensor]
}

// In-memory implementations for testing
class InMemorySensorResultRepository extends SensorResultRepository {
  private val resultMap = mutable.Map[Int, SensorResult]()
  private var nextId = 1
  
  override def save(result: SensorResult): SensorResult = {
    val newResult = if (result.id <= 0) {
      val savedResult = result.copy(id = nextId)
      nextId += 1
      savedResult
    } else result
    
    resultMap(newResult.id) = newResult
    newResult
  }
  
  override def findById(id: Int): Option[SensorResult] = resultMap.get(id)
  
  override def findByPlantId(plantId: Int): List[SensorResult] = 
    resultMap.values.filter(_.plant_id == plantId).toList
}